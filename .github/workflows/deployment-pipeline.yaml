# name: Deploy to Amazon

# on:
#   push:
#     # branches: [main]
#   pull_request:
#     # branches: [main]

# jobs:
#   deploy:
#     name: Deploy
#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # - name: install kubectl
#       #   uses: azure/setup-kubectl@v2.0
#       #   with: 
#       #     version: default
#       #   id: install        


#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2
#         with:
#           # role-to-assume: arn:aws:iam::123456789012:role/my-github-actions-role
#           aws-region: us-east-1

#       # - name: testing
#       #   run: ls

#       - name: Build, tag, and push the image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: staging-ecr  # ${{ secrets.REPO_NAME }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           # Build a docker container and push it to ECR 
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           echo "Pushing image to ECR..."
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

#       # Updating the name and region for kubectl config giving it context to allow it to connect to EKS cluster
#       # - name: Update kube config
#       #   run: aws eks update kubeconfig --name staging --region us-east-1

#       # - name: Deploy to EKS
#       #   run: kubectl apply -r cpm-staging.yaml




#       # - name: Run Tests
#       #   run: |
#       #     kubectl exec --stdin --tty 

#       # - name: Set up Docker Buildx
#       #   uses: docker/setup-buildx-action@v3

#       # - name: Push OctoPetShop packages
#       #   uses: OctopusDeploy/push-package-action@v1
#       #   with:
#       #     api_key: ${{ secrets.OCTOPUSSERVERAPIKEY }}
#       #     server: ${{ secrets.OCTOPUSSERVERURL }}
#       #     packages: "artifacts/OctoPetShop.Database.${{ env.PACKAGE_VERSION }}.zip,artifacts/OctoPetShop.Web.${{ env.PACKAGE_VERSION }}.zip,artifacts/OctoPetShop.ProductService.${{ env.PACKAGE_VERSION }}.zip,artifacts/OctoPetShop.ShoppingCartService.${{ env.PACKAGE_VERSION }}.zip"
#       #     space: ${{ secrets.OCTOPUSSERVER_SPACE }}

#       # - name: Create and deploy release
#       #   uses: OctopusDeploy/create-release-action@v1
#       #   with:
#       #     api_key: ${{ secrets.OCTOPUSSERVERAPIKEY }}
#       #     server: ${{ secrets.OCTOPUSSERVERURL }}
#       #     space: ${{ secrets.OCTOPUSSERVER_SPACE }}
#       #     project: "Octo Pet Shop"
#       #     deploy_to: "Development"
#       #     progress: true